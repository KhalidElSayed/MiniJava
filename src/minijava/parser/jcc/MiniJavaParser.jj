// MiniJava definition for JavaCC. Based off grammar provided in class.

options {
    STATIC = false;
}

PARSER_BEGIN(JCCMiniJavaParser)

package minijava.parser.jcc;

import minijava.ast.*;
import java.util.ArrayList;
public class JCCMiniJavaParser {}

PARSER_END(JCCMiniJavaParser)

SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
|   < "//" (~["\n","\r"])*  > // may be at end of file.
|   < "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" >
}

// keywords
TOKEN : {
    < BOOLEAN: "boolean" >
|   < CLASS: "class" >
|   < ELSE: "else" >
|   < EXTENDS: "extends" >
|   < FALSE: "false" >
|   < IF: "if" >
|   < INT: "int" >
|   < MAIN: "main" >
|   < NEW: "new" >
|   < NULL: "null" >
|   < PRINT: "System.out.println" >
|   < PUBLIC: "public" >
|   < RETURN: "return" >
|   < STATIC: "static" >
|   < STRING: "String" > // any problem with this being a keyword?
|   < THIS: "this" >
|   < TRUE: "true" >
|   < VOID: "void" >
|   < WHILE: "while" >
|   < DOTLENGTH: ".length" >//Match ".length" instead of "length" because "length" is a valid identifier
}

// identifiers
TOKEN : {
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"_")* >
|   < INT_LITERAL: "0" | (["1"-"9"] (<DIGIT>)*) >
|   < LETTER: ["a"-"z"] | ["A"-"Z"] >
|   < DIGIT: ["0"-"9"] >
}

// misc
TOKEN : {
    < LPAREN: "(" >
|   < RPAREN: ")" >
|   < LBRACK: "[" >
|   < RBRACK: "]" >
|   < LBRACE: "{" >
|   < RBRACE: "}" >
|   < ADD: "+" >
|   < AND: "&&" >
|   < ASSIGN: "=" >
|   < BANG: "!" >
|   < COMMA: "," >
|   < DOT: "." >
|   < LTHAN: "<" >
|   < MINUS: "-" >
|   < MULT: "*" >
|   < SEMICOLON: ";" >
}

Program Program() : {
	MainClass mainClass; 
	ClassDecl curClass; 
	ArrayList<ClassDecl> classes = new ArrayList<ClassDecl>();
} {
    /* well, this is a hack if there ever was one. 
     * On windows boxes, the newlines produced 
     * by pretty printer must be unix style */
	{ System.setProperty("line.separator","\n"); }
    mainClass = MainClass() (    
    	curClass = ClassDeclaration() 
    	{ classes.add(curClass); }
    )* <EOF>
    { return new Program(mainClass, new NodeList<ClassDecl>(classes)); }
}

MainClass MainClass() : { 
	Token className; 
	Token argName; 
	Statement statement; 
} {
    <CLASS> (className = <IDENTIFIER>) <LBRACE>
        <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN>
        <STRING> <LBRACK> <RBRACK> (argName=<IDENTIFIER>) <RPAREN> <LBRACE>
           (statement = Statement())
        <RBRACE>
    <RBRACE>
    
    { return new MainClass(className.image, argName.image,statement); }
}

ClassDecl ClassDeclaration() : {
	Token id; 
	Token exts = null;ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); 
	ArrayList<MethodDecl> methods = new ArrayList<MethodDecl>();
} {
    <CLASS> id=<IDENTIFIER> ( <EXTENDS> (exts = <IDENTIFIER>) )? <LBRACE>
        ( ({ VarDecl v=null; } v=VarDeclaration(VarDecl.Kind.FIELD) { vars.add(v); })
        | ({ MethodDecl d=null; } d=MethodDeclaration(){ methods.add(d); }) )*
    <RBRACE>
    
    { return new ClassDecl(id.image, (exts==null?null:exts.image),vars,methods); }
}

VarDecl VarDeclaration(VarDecl.Kind kind) : {
	Type t;
	Token id;
} {
   t = Type() id = <IDENTIFIER> <SEMICOLON>
   { return new VarDecl(kind,t,id.image); }
}

MethodDecl MethodDeclaration() : {
	Type t;
	Token id;
	NodeList<VarDecl> args;
	ArrayList<Statement> body = new ArrayList<Statement>();
	ArrayList<VarDecl> vars = new ArrayList<VarDecl>() ;
} {
    <PUBLIC> t=Type() id= <IDENTIFIER> <LPAREN> args=FormalList() <RPAREN> <LBRACE>
        (LOOKAHEAD(2) 
               // this doesn't quite match the specification.
               ({VarDecl v;} v= VarDeclaration(VarDecl.Kind.LOCAL) {vars.add(v);})
             | ( {Statement stm;}  stm = Statement() {body.add(stm);})

         )*
        <RETURN> {Expression rtn;}(rtn =Expression()) <SEMICOLON>
    <RBRACE>
    
    { 
    	return new MethodDecl(t, id.image, args, new NodeList<VarDecl>(vars),
    		new NodeList(body), rtn); 
    }
}

NodeList<VarDecl> FormalList() : {
	Type t; 
	Token id; 
	ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); 
} {
    ( 
    	t=Type() id=<IDENTIFIER> 
    	{ vars.add(new VarDecl(VarDecl.Kind.FORMAL,t,id.image)); }
     	( 
     		<COMMA> t=Type() id=<IDENTIFIER> 
     		{ vars.add(new VarDecl(VarDecl.Kind.FORMAL,t,id.image)); }
     	)* 
    )?
    { return new NodeList<VarDecl>(vars); }
}

Type Type() : { }
{
	( <INT> (<LBRACK> <RBRACK> {return IntArrayType.instance;})?
	        {return IntegerType.instance;})
|  	( <BOOLEAN> {return BooleanType.instance;})
    // is it neccesary to split these two types?
| 	( <STRING>  {return new ObjectType("String");})
|  	( { Token id; } id = <IDENTIFIER> { return new ObjectType(id.image);} )
}

Statement Statement() : {
	Statement stm;
	Statement stmLocal; 
	Expression exp; 
	Expression tst; 
} {
	/* A block of statements */
  	(
  		{ArrayList<Statement> stms = new ArrayList<Statement>();}  
    	<LBRACE> ((stmLocal= Statement()) {stms.add(stmLocal);})* <RBRACE>
  		{ return new Block(new NodeList<Statement>(stms)); }
  	)
  	
  	/* If then else statements */
|   (
		{Statement thn; Statement els;} 
		<IF> <LPAREN> (tst = Expression()) <RPAREN>
       		(thn =  Statement())
      	<ELSE>
       		(els = Statement())        
       	{ return new If(tst,thn,els); }
	)
       
    /* While statements */
|   (
		{ Statement body;} 
		<WHILE> <LPAREN> (tst =  Expression()) <RPAREN>
       		(body = Statement()) 
       	{ return new While(tst,body); }
    )
       
    /* Print statements */
|   (
		<PRINT> <LPAREN> (exp = Expression()) <RPAREN> <SEMICOLON> 
		{ return new Print(exp);} 
	)

	/* Assignments */
|   ( 	
		{ Token id; Expression index = null; Expression assign; }
		(id = <IDENTIFIER> )( <LBRACK> (index = Expression()) <RBRACK> )?
    	<ASSIGN> (assign = Expression()) <SEMICOLON> 
    	{
    		if(index!=null)
       			return new ArrayAssign(id.image,index,assign);
    		else
         		return new Assign(id.image,assign);
    	}
    )
}

Expression Expression() : {
    Expression exp, cur;
} {	 
    exp = LThanTerm()
    (
    	LOOKAHEAD(2)
       	<AND> cur = LThanTerm()
       	{ exp = new And(exp,cur); }
    )*

    { return exp; }
}

Expression LThanTerm() : {
    Expression exp, cur;
} {     
    exp = AdditionTerm()
    (
    	LOOKAHEAD(2)
        <LTHAN> cur = AdditionTerm()
        { exp = new LessThan(exp,cur); }
    )*

    { return exp; }
}

Expression AdditionTerm() : {
    Expression exp, cur;
} {
	/* Addition and multiplication here 
	 * so the precendence is equal */
    exp = MultTerm()
    (
    	LOOKAHEAD(2)
        <MINUS> cur = MultTerm()
        { exp = new Minus(exp, cur); }
        | <ADD> cur = MultTerm()
        { exp = new Plus(exp, cur); }
    )*

    { return exp; }
}

Expression MultTerm() : {
    Expression exp, cur;
} {
    exp = NotTerm()
    
    (
    	LOOKAHEAD(2)
        <MULT> cur = NotTerm()
        { exp = new Times(exp,cur); }
    )*

    { return exp; }
}

Expression NotTerm() : {
    Expression exp;
} {
    LOOKAHEAD(2)
    ( <BANG> exp = NotTerm() { return new Not(exp); } )
    | ( exp = DotTerm() { return exp; } )
}

Expression DotTerm() : {
    Expression exp, cur;
} {
    exp = ArrayTerm()
    
    (
    	( <DOTLENGTH>{return new ArrayLength(exp);} )
       |( <DOT> cur = DotRHS(exp))
        { exp = cur; }
    )*

    { return exp; }
}

Expression DotRHS(Expression lhs ) : {
	Expression arg;
	ArrayList<Expression> args = new ArrayList<Expression>();
} {	
	/* Method calls and other fields */
	(
		{ Token id; }	
		id = <IDENTIFIER> 
		<LPAREN> 
		(
 			( arg= Expression() {args.add(arg);} )
 			( <COMMA> (arg = Expression() {args.add(arg);} ))* 
 		)?
 		<RPAREN>
   		{ return new Call(lhs, id.image, new NodeList<Expression>(args)); }
 	)
}

Expression ArrayTerm() : { }
{
    { Expression term; Expression index = null; }
    term = TerminalExp() 
    ( LOOKAHEAD(1) <LBRACK> index=Expression() <RBRACK> )?
    {
    	if (index!=null)
        	return new ArrayLookup(term,index);
    	else
        	return term;	
    }
}

Expression TerminalExp() : { 
	Token id; 
	Expression term; 
} {
	/* Integer literal */
    id = <INT_LITERAL>
    { return new IntegerLiteral(String.valueOf(id.image)); }

	/* Identifier */
|   id = <IDENTIFIER>
    { return new IdentifierExp(id.image); }

	/* Allocation with new */
|   <NEW> term = NewRHS()
    { return term; }

	/* Grouping */
|   <LPAREN> term = Expression() <RPAREN>
    { return term; }

	/* This keyword */
|   <THIS>
    { return new This(); }

	/* Boolean constants */
|   <TRUE>
    { return new BooleanLiteral(true); }

|   <FALSE>
    { return new BooleanLiteral(false); }
}

Expression NewRHS() : { }
{
	/* Allocating an array */
 	(
 		{ Expression exp; } 
 		<INT> <LBRACK> (exp = Expression()) <RBRACK> 
 		{ return new NewArray(exp); }
 	)

	/* Allocating objects */
| 	(	
		{ Token id; }
		id = <IDENTIFIER> <LPAREN> <RPAREN> 
		{ return new NewObject(id.image); }
	)
}


